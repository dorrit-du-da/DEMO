{-# OPTIONS -Wno-deprecations #-} -- To supress 'Monad' warnings
{-
This module is adapted from Haskell's recursion-schemes. I've included the 
copyright to give credit where it's due.

This module differs from it in these ways:
  1. This is meant to be a pedagogic package, so we've used arrow operators
     to emphasize symmetry between (co)recursive functions, instead of using
     (.). This adds a dependency on `Control.Arrow`.
  2. daml doesn't support the type family extension. Instead, we've used
     functional deps, and this approach works quite well, especially for
     type inference.
  3. daml doesn't support recursion inside top-level functions. I've created
     several helper functions that shouldn't be exported. They're prefixed with _.

-----------------------------------------------------------------------------
-- |
-- Copyright   :  (C) 2008-2015 Edward Kmett
-- License     :  BSD-style (see the file LICENSE)
--
-- Maintainer  : "Samuel GÃ©lineau" <gelisam@gmail.com>,
--               "Oleg Grenrus" <oleg.grenrus@iki.fi>,
--               "Ryan Scott" <ryan.gl.scott@gmail.com>
-- Stability   :  experimental
-- Portability :  non-portable
--
----------------------------------------------------------------------------

-}

module Daml.Control.Recursion (
--  Fix(..)
    Free(..)
  , FreeF(..)
  , Cofree(..)
  , CofreeF(..)
  , Recursive(..)
  , Corecursive(..)
  , ListF(..)
  , hylo
) where

import Daml.Control.Category ((>>>),(<<<))
import Daml.Control.Arrow ((&&&),(|||))
import Daml.Control.Comonad

class Functor f => Recursive b f | b -> f b where
  project: b -> f b

  cata : (f a -> a) -> b -> a
  cata f b = (project >>> fmap (cata f) >>> f) b

  para : (f (b, a) -> a) -> b -> a
  para f b = (project >>> fmap (identity &&& para f) >>> f) b

  histo : (f (Cofree f a) -> a) -> b -> a
  histo = gcata seqHisto

  gcata : Comonad w => (forall z . f (w z) -> w (f z)) -> (f (w a) -> a) -> b -> a
  gcata sequence f b = (_gcata sequence f >>> extract >>> f) b

seqHisto : Functor f => f (Cofree f a) -> Cofree f (f a)
seqHisto f = Cofree (fmap extract f) (fmap (seqHisto . unwrap) f)

_gcata
  : (Recursive b f , Comonad w)
  => (forall z . f (w z) -> w (f z))
  -> (f (w a) -> a)
  -> b
  -> w (f (w a))
_gcata sequence f b = (project >>> fmap (_gcata sequence f >>> fmap f >>> duplicate) >>> sequence) b

class Functor f => Corecursive b f | f -> b where
  embed: f b -> b

  ana : (a -> f a) -> a -> b
  ana f a = (embed <<< fmap (ana f) <<< f) a

  apo : (a -> f (Either b a)) -> a -> b
  apo f a = (embed <<< fmap (identity ||| apo f) <<< f) a

  futu : (a -> f (Free f a)) -> a -> b
  futu = undefined

  gana : Monad m => (forall z . m (f z) -> f (m z)) -> (a -> f (m a)) -> a -> b
  gana cosequence f a = (_gana cosequence f <<< pure <<< f) a

_gana
  : (Corecursive b f, Monad m)
  => (forall z . m (f z) -> f (m z))
  -> (a -> f (m a))
  -> m (f (m a))
  -> b
_gana cosequence f mfma = (embed <<< fmap (_gana cosequence f <<< fmap f <<< join) <<< cosequence) mfma

seqApo : (Recursive b f, Functor f) => Either b (f a) -> f (Either b a)
seqApo = either (fmap Left . project) (fmap Right)

hylo : Functor f => (f b -> b) -> (a -> f a) -> a -> b
hylo f g a = _hylo f g a

_hylo : Functor f => (f b -> b) -> (a -> f a) -> a -> b
_hylo f g a = (f . fmap (_hylo f g) . g) a

-- Standard Base Functors

data ListF a x = Nil | Cons with value: a, pattern: x deriving Functor

instance Recursive [a] (ListF a) where
  project [] = Nil
  project (a :: as) = Cons a as

instance Corecursive [a] (ListF a) where
  embed Nil = []
  embed (Cons a as) = a :: as

oursum = cata \case
           Nil -> 0
           Cons x acc -> acc + x

s = oursum [1..20]

-- newtype Fix f = Fix { unfix : f (Fix f) }

data Free f a
  = Pure a
  | Impure (f (Free f a))

data FreeF f a x
  = PureF a
  | ImpureF (f x)
  deriving Functor

instance Functor f => Recursive (Free f a) (FreeF f a) where
  project (Pure a) = PureF a
  project (Impure fx) = ImpureF fx

instance Functor f => Corecursive (Free f a) (FreeF f a) where
  embed _ = undefined

data Cofree f a
  = Cofree {
    attribute : a,
    unwrap : f (Cofree f a)
  } deriving Functor

data CofreeF f a x
  = CofreeF {
    attribute: a,
    unwrapf: f x
  } deriving Functor

instance Functor f => Comonad (Cofree f) where
  extract (Cofree a _) = a
  duplicate f = Cofree f $ fmap duplicate f.unwrap

instance Functor f => Corecursive (Cofree f a) (CofreeF f a) where
  embed (CofreeF a f) = Cofree a f
