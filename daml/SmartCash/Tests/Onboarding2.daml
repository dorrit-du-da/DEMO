module SmartCash.Tests.Onboarding2 where

import Daml.Script
import SmartCash.Tests.Setup (setup, Parties(..))
-- import SmartCash.Tests.Rule (ruleTest)
import SmartCash.Utils
import SmartCash.InternalMerchant.Service qualified as InternalMerchant
import SmartCash.InternalMerchant.Model ( Purchase(..), Condition(..) )
import SmartCash.ExternalMerchant.Model  qualified as ExternalMerchant
import SmartCash.Rule.Model 
import DA.Date (date, Month(Jan, Oct))
import DA.Time

test: Script ()
test = do
  parties <- setup
  intOnboarding parties
  extOnboarding parties
  -- ruleTest parties
  pure()

intOnboarding : Parties  -> Script ()
intOnboarding Parties{..}  = do

  intMerchant1Service <- onboardIntMerchant operator operator intMerchant1 intmerchant1AccountId [alice, bob, charlie] 
  intMerchant2Service <- onboardIntMerchant operator operator intMerchant2 intmerchant2AccountId [alice, bob, charlie] 
  intMerchant3Service <- onboardIntMerchant operator operator intMerchant3 intmerchant3AccountId [alice, bob, charlie] 

  let
    rewardRule1 = RewardRule with  factor = [ANY], reward= DISCOUT,  value = 0.02
    rewardRule2 = RewardRule with  factor = [ANY], reward= MULTIPLY,  value = 1.3
    rewardRule3 = RewardRule with factor = [DATE], reward= MULTIPLY,  value = 1.25
    rewardRule4 = RewardRule with  factor = [DATE], reward= FIXED_PX,  value = 80.0
    rewardRule5 = RewardRule with  factor = [ANY], reward= FIXED_CUT,  value = 10.0
    -- rewardRule6 = RewardRule with factor = [ONE_OFF_QTY], reward= DISCOUT,  value = 0.02
    rewardRule7 = RewardRule with factor = [ONE_OFF_AMOUNT], reward= FIXED_CUT,  value = 100.0
    rewardRule8 = RewardRule with  factor = [TIME], reward= FIXED_PX,  value = 90.0
    rewardRule9 = RewardRule with  factor = [ACCUMULATED_QTY], reward= DISCOUT,  value = 0.7
    -- rewardRule10 = RewardRule with factor = [ACCUMULATED_AMOUNT], reward= FIXED_CUT, value = 20.0
    rewardRule11 = RewardRule with factor = [MEMBERSHIP], reward= FIXED_CUT, value = 0.0
    
    gold = MembershipDetail with grade = SmartCash.Rule.Model.GOLD, limit = 100000.0, value = 0.3
    silver = MembershipDetail with grade = SmartCash.Rule.Model.SILVER, limit = 1000.0, value = 0.2
    bronze = MembershipDetail with grade = SmartCash.Rule.Model.BRONZE, limit = 500.0, value = 0.1
    normal = MembershipDetail with grade = SmartCash.Rule.Model.NORMAL, limit = 300.0, value = 0.5


  --Internal  Rule
  createRule operator intMerchant1  "intMerchant2-001" rewardRule1 None None None None None None
  createRule operator intMerchant1  "intMerchant2-002" rewardRule2 None None None None None None
  createRule operator intMerchant1  "intMerchant1-003" rewardRule3 (Some (DA.Date.date 2022 Oct 22)) (Some( DA.Date.date  2022 Oct 30)) None None None None
  -- createRule operator intMerchant1  "intMerchant1-004" rewardRule4 (Some (DA.Date.date 2022 Oct 22)) (Some( DA.Date.date  2022 Oct 30)) None None None None
  -- createRule operator intMerchant1  "intMerchant1-005" rewardRule5 None None None None None None

  let rewardRule6 = RewardRule with factor = [ONE_OFF_QTY], reward= DISCOUT,  value = 0.1
  createRule operator intMerchant2  "intMerchant2-006" rewardRule6 None None (Some 3.0) None None None


  createRule operator intMerchant2  "intMerchant2-007" rewardRule7 None None (Some 1000.0) None None None
  createRule operator intMerchant1  "intMerchant1-008" rewardRule8 None None (Some 1000.0) (Some 17) (Some 19) None
  -- createRule operator intMerchant1  "intMerchant1-009" rewardRule9 None None (Some 10.0) None None None
  
  let rewardRule10 = RewardRule with factor = [ACCUMULATED_AMOUNT], reward= FIXED_CUT, value = 20.0
  createRule operator operator  "Operator-010" rewardRule10 None None (Some 1000.0) None None None

  createRule operator operator  "Operator-001" rewardRule11 None None None None None (Some [gold, silver, bronze, normal])



  -- createSpendingRule operator operator intMerchant2 "intMerchant2-001" [alice, bob, charlie] [gold, silver, bronze, iron]
  -- createSpendingRule operator operator intMerchant3 "intMerchant3-001" [alice, bob, charlie] [gold, silver, bronze, iron] 

  --Internal Product List
  product1Cid <- createInternalProduct operator operator intMerchant1 ["intMerchant1-003"] "product001" "Example 1" 1250.00 [alice, bob, charlie] NONE
  product2Cid <- createInternalProduct operator operator intMerchant1 ["intMerchant1-002"] "product002" "Example 2" 11000.00 [alice, bob, charlie] NONE
  product3Cid <- createInternalProduct operator operator intMerchant1 ["intMerchant1-001"] "product003" "Example 3" 100.00 [alice, bob, charlie] NONE
  -- product4Cid <- createInternalProduct operator operator intMerchant1 ["intMerchant1-004"] "product004" "Standard Life Insurance" 9000.00 [alice, bob, charlie] NONE
  -- product5Cid <- createInternalProduct operator operator intMerchant1 ["intMerchant1-005"] "product005" "Example5 Life Insurance" 800.00 [alice, bob, charlie] NONE
  product6Cid <- createInternalProduct operator operator intMerchant2 ["intMerchant2-006", "Octopus-010"] "product006" "Example 6" 100.00 [alice, bob, charlie] NONE
  product7Cid <- createInternalProduct operator operator intMerchant2 ["intMerchant2-007"] "product007" "Example 7" 100000.00 [alice, bob, charlie] NONE
  -- product8Cid <- createInternalProduct operator operator intMerchant1 ["intMerchant1-008"] "product008" "Example8 Life Insurance" 100.00 [alice, bob, charlie] NONE
  -- product9Cid <- createInternalProduct operator operator intMerchant1 ["intMerchant1-009"] "product009" "Example9 Life Insurance" 100.00 [alice, bob, charlie] NONE
  -- product10Cid <- createInternalProduct operator operator intMerchant1 ["intMerchant1-010"] "product010" "Example10 Life Insurance" 100.00 [alice, bob, charlie] NONE
  -- product11Cid <- createInternalProduct operator operator intMerchant1 ["operator-011"] "product011" "Example11 Life Insurance" 100.00 [alice, bob, charlie] NONE
  -- product12Cid <- createInternalProduct operator operator intMerchant2 ["intMerchant2-001", "operator-011"] "product012" "Example12 Life Insurance" 100.00 [alice, bob, charlie] AND









  -- product21Cid <- createInternalProduct operator operator intMerchant2 "intMerchant2-001" "product001" "Game of S.U.R.F" 2950.00 [alice, bob, charlie] GOLD
  -- product22Cid <- createInternalProduct operator operator intMerchant2 "intMerchant2-001" "product002" "Tokyo Olympic Games" 4900.00 [alice, bob, charlie] SILVER
  -- product23Cid <- createInternalProduct operator operator intMerchant2 "intMerchant2-001" "product003" "eSport Ticket" 20100.00 [alice, bob, charlie] BRONZE



  --Customer Internal Merchant Purchase
  -- let t = 17
  -- -- DATE + MULTIPLY
  -- createInternalPurchase operator alice product3Cid 1.0 (DA.Date.date 2022 Oct 23) t
  -- -- ANY + MULTIPLY
  -- createInternalPurchase operator bob product2Cid 1.0 (DA.Date.date 2022 Oct 21) t
  -- -- DATE + FIXED_PX
  -- createInternalPurchase operator charlie product4Cid 2.0 (DA.Date.date 2022 Oct 22) t
  -- -- ANY + FIXED_CUT
  -- createInternalPurchase operator charlie product5Cid 1.0 (DA.Date.date 2022 Oct 22) t
  -- ONE_OFF_QTY + DISCOUT  
  -- createInternalPurchase operator charlie product6Cid 4.0 (DA.Date.date 2022 Oct 22) t
  -- ONE_OFF_AMOUNT + FIXED_CUT  
  -- createInternalPurchase operator charlie product7Cid 10.0 (DA.Date.date 2022 Oct 22) t
  -- TIME + FIXED_PX  T.B.F how to set time?
  -- createInternalPurchase operator charlie product8Cid 1.0 (DA.Date.date 2022 Oct 22) t
  --ACCUMULATED_QTY + DISCOUNT
  -- createInternalPurchase operator charlie product9Cid 3.0 (DA.Date.date 2022 Oct 22) t
  --ACCUMULATED_AMOUNT + FIXED_CUT
  -- createInternalPurchase operator charlie product10Cid 3.0 (DA.Date.date 2022 Oct 22) t
  --MEMBERSHIP
  -- createInternalPurchase operator charlie product11Cid 2.0 (DA.Date.date 2022 Oct 22) t
  -- createInternalPurchase operator charlie product11Cid 2.0 (DA.Date.date 2022 Oct 22) t
  -- createInternalPurchase operator charlie product11Cid 6.0 (DA.Date.date 2022 Oct 22) t
  -- AND >> MEMBERSHIPT + ANY
  -- createInternalPurchase operator charlie product12Cid 1.0 (DA.Date.date 2022 Oct 22) t
  -- createInternalPurchase operator charlie product6Cid 3.0 (DA.Date.date 2022 Oct 22) t




  
  pure()

extOnboarding : Parties  -> Script ()
extOnboarding Parties{..}  = do
  onboardExtMerchant operator operator extMerchant1 extmerchant1AccountId [alice, bob, charlie] 
  onboardExtMerchant operator operator extMerchant2 extmerchant2AccountId [alice, bob, charlie] 
  onboardExtMerchant operator operator extMerchant3 extmerchant3AccountId [alice, bob, charlie]

  let
    rewardRule1 = RewardRule with  factor = [ANY], reward= DISCOUT,  value = 0.1
    rewardRule2 = RewardRule with  factor = [ANY], reward= MULTIPLY,  value = 1.3
    rewardRule3 = RewardRule with factor = [DATE], reward= MULTIPLY,  value = 1.25
    rewardRule4 = RewardRule with factor = [ANY], reward= DISCOUT,  value = 0.1
    rewardRule5 = RewardRule with factor = [ONE_OFF_QTY], reward= FIXED_PX,  value = 10.0

   --External Reward Rule
  createRule operator extMerchant1  "extMerchant1-001" rewardRule1 None None None None None None
  -- createRule operator extMerchant1  "extMerchant1-002" rewardRule2 None None None None None None
  createRule operator extMerchant1  "extMerchant1-003" rewardRule3 (Some (DA.Date.date 2022 Oct 22)) (Some( DA.Date.date  2022 Oct 30)) None None None None
  -- createRule operator extMerchant1  "extMerchant1-004" rewardRule4 None None None None None None
  -- createRule operator extMerchant1  "extMerchant1-005" rewardRule5 None None (Some 3.0) None None None

  -- --External Product List
  product1Cid <- createExternalProduct operator operator extMerchant1 ["extMerchant1-001", "Operator-010"] "product001" "Example 7" 100.00 [alice, bob, charlie] ExternalMerchant.NONE
  -- product2Cid <- createExternalProduct operator operator extMerchant1 ["extMerchant1-002"] "product002" "Example 2" 11000.00 [alice, bob, charlie] ExternalMerchant.NONE
  -- product1Cid <- createExternalProduct operator operator extMerchant1 "extMerchant1-001" "product001" "Mocha Latte" 2000.00 [alice, bob, charlie] (ExternalMerchant.GOLD )
  -- product2Cid <- createExternalProduct operator operator extMerchant1 "extMerchant1-001" "product002" "Americano" 1000.00 [alice, bob, charlie] (ExternalMerchant.SILVER )
  -- product3Cid <- createExternalProduct operator operator extMerchant1 "extMerchant1-001" "product003" "Cheese Cake" 3000.00 [alice, bob, charlie] (ExternalMerchant.BRONZE)
  -- product4Cid <- createExternalProduct operator operator extMerchant1 ["extMerchant1-004", "extMerchant1-005"] "product004" "Example 3" 100.00 [alice, bob, charlie] (ExternalMerchant.AND)

  -- --Customer External Merchant Purchase
  let t = 17
  -- createExternalPurchase operator charlie product1Cid 1.0 (DA.Date.date 2022 Oct 22) t
  -- createExternalPurchase operator charlie product4Cid 4.0 (DA.Date.date 2022 Oct 22) t
  -- createExternalPurchase operator alice product1Cid 1.0
  -- createExternalPurchase operator alice product1Cid 4.0
  -- createExternalPurchase operator alice product2Cid 10.0
  -- createExternalPurchase operator alice product2Cid 40.0 



  pure()