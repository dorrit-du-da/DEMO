module SmartCash.Rule.Service where

import DA.Next.Set
import DA.Finance.Types
import SmartCash.Rule.Model 
import DA.Foldable (forA_)
import DA.Optional


createOrLookup : forall t k. (Template t, TemplateKey t k) => t -> Update (ContractId t)
createOrLookup t = lookupByKey @t (key t) >>= \case
    (Some cid) -> return cid
    None       -> create t

template Service
  with
    operator : Party
    provider : Party
    observers: Set Party
  where
    signatory operator, provider
    observer observers

    key (operator, provider) : (Party, Party)
    maintainer key._1

    controller provider can
      nonconsuming CreateRule : ContractId Rule
        with
          ruleId: Text
          rewardRule: RewardRule
          startDate: Optional Date
          endDate: Optional Date
          quantity: Optional Decimal
          startTime: Optional Int
          endTime: Optional Int
          membershipDetail:Optional [MembershipDetail]
        do
          let factors = rewardRule.factor
          forA_ factors \(factor) -> do
            case factor of
              DATE -> do
                create DateRule with startDate = fromSome startDate, endDate = fromSome endDate, ..
                pure()
              ONE_OFF_QTY  -> do
                create QuantityRule with quantityLimit = fromSome quantity, ..
                pure()
              ONE_OFF_AMOUNT -> do
                create QuantityRule with quantityLimit = fromSome quantity, ..
                pure()
              ACCUMULATED_QTY -> do
                create QuantityRule with quantityLimit = fromSome quantity, ..
                pure()
              ACCUMULATED_AMOUNT -> do
                create QuantityRule with quantityLimit = fromSome quantity, ..
                pure()
              TIME -> do
                create TimeRule with startTime = fromSome startTime, endTime = fromSome endTime, ..
                pure()
              MEMBERSHIP -> do
                create MembershipRule with membershipDetail = fromSome membershipDetail, ..
                pure()
              ANY -> pure()
          create Rule with ..

    --   nonconsuming CreateProduct: ContractId InternalMerchant.Product 
    --     with
    --       ruleId: Text
    --       productId: Text
    --       item: Text
    --       unitPrice: Decimal
    --       category: InternalMerchant.Category
    --     do
    --       create InternalMerchant.Product with provider = customer, ..



template Offer
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider

    controller customer can
      Accept : ContractId Service
        with
          accountId: Id
          observers: [Party]
        do
          createOrLookup Service with observers = fromList observers, ..

      Decline : ()
        do
          return ()

    controller provider can
      Withdraw : ()
        do pure ()

template Request
  with
    provider : Party
    customer : Party
  where
    signatory customer
    observer provider

    controller customer can
      Cancel : ()
        do pure ()

    controller provider can
      Reject : ()
        do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
        accountId: Id
        observers: [Party]
      controller operator, provider
      do
        createOrLookup Service with observers = fromList observers, ..
